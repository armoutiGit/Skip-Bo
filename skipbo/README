As a group we have created a completely functional SkipBo card game. The game works by
detecting user input commands.  These commands dictate the pile from which the player would
like to move from and the pile to which the player would like to move to.  The program detects if
the move that the player wants to make is illegal or legal.  The program is also fully able to
handle bad user input.

We implemented a CommandLineError class that handled all command line errors so that they
did not take up space in the main function.  This helper class makes it easier to interpret what is
happening in the main function.

Something that we had particular trouble with was moving the cards located in “set aside” piles
to the draw when the player wanted to save the game.  In order to accomplish this, we had to
iterate through our “set aside” piles in reverse so that the earliest completed pile would be
added to the front of the draw.  We also implemented an “insert” function in the Pile class so that
we could add cards to the front of the draw.

We only made a BuildPile class to satisfy gradescope.  We found that creating a BuildPile class
was unnecessary as we could just use the FaceUpPile class.  We distinguished our build piles
from other FaceUpPile objects (such as the stock pile and discard piles) by containing them in
an array called “build”.

Creating a BuildPile and PlayPile class added unnecessary complexity to the program where we
could easily make arrays of FaceUpPile objects since we already know how many of each we
are going to have.
